#!/usr/bin/env python


#    Copyright Paul Munday 2013

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import re
import swrapper         # this programs module
from swrapper import get_config
from swrapper import pos_test_samsung, pos_test_dialog, scale_test_magellan


# MAIN

if __name__ == "__main__": 
    
    #read command line arguments
    parser=argparse.ArgumentParser()
    parser.add_argument("--test", choices=['samsung', 'dialog', 'magellan'], help="Run specified test. See README.tests")
    parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")
    parser.add_argument("--pos", help="specify the scale type used by the POS. Once of dialog or samsung. If not specified the program will attempt to use scale type defined in the config file.")
    parser.add_argument("--scale", help="specify scale that is connected. Possible values include dummy, MagellanSASI, PC-100. If not specified the program will attempt to use a scale defined in the config file.")
    parser.add_argument("--pos-serial", help="specify the serial port the pos is connected to. e.g. /dev/pts/11")
    parser.add_argument("--scale-serial", help="specify the serial port the scale is connected to. e.g. /dev/ttyS3")
    parser.add_argument("--weight-unit", help="weight units used by external scales. One of k, g, or lb. For kilos, grammes or pounds")
    args=parser.parse_args()

    # run tests
    if args.test:
        if args.test == 'samsung':
            pos_test_samsung(args.pos_serial)
        elif args.test == 'dialog':
            pos_test_dialog(args.pos_serial)
        elif args.test == 'magellan':
            scale_test_magellan(args.scale_serial)
        print('completed tests')
        sys.exit(0)


    # read config file
    pos_config = get_config('pos')
    scale_config = get_config('scale')
    defined_scale = get_config('scale_definition')

    # load and check settings
    # Note: command line options take precendence
    if args.pos:
        pos_scale = args.pos
    elif pos_config.has_key('type'):
        pos_scale = pos_config['type']
    else:
        pos_scale = 'samsung'           # default to samsung if unspecified
                                        # rather than raise error
    try:
        if args.scale is not None:
            external_scale = args.scale
        elif scale_config.has_key('type'):
             external_scale = scale_config['type']
        else:
            raise Exception ('No external scale defined')
    except Exception, err:
        if err == 'No external scale defined':
            sys.stderr.write('ERROR: %s\n' % str(err))
            sys.exit(1)
        else:
            raise
    
    try:
        if args.pos_serial is not None:
            pos_scale_serialport = args.pos_serial
        elif pos_config.has_key('serialport'):
            pos_scale_serialport = pos_config['serialport']
        else:
            raise Exception("No serial port defined for pos: " + pos_scale)
    except Exception, err:
        if re.match(r'^No serial port defined',str(err)): 
            sys.stderr.write('ERROR: %s\n' % str(err))
            sys.exit(1)
        else:
            raise

    try:
        if args.scale_serial is not None:
            external_scale_serialport = args.scale_serial
        elif scale_config.has_key('serialport'):
            external_scale_serialport = scale_config['serialport']
        else:
            raise Exception("No serial port defined for external scale: "  + external_scale)
    except Exception, err:
        if re.match(r'^No serial port defined',str(err)): 
            sys.stderr.write('ERROR: %s\n' % str(err))
            sys.exit(1)
        else:
            raise

    if args.weight_unit:
        weight_unit = args.weight_unit
    elif scale_config.has_key('weight-unit'):
        weight_unit = scale_config['weight-unit']
    else: 
        weight_unit = 'k'


    # open serial devices
    # POS
    if pos_scale == 'samsung':
        pos = Samsung(pos_scale_serialport)
    elif pos_scale == 'dialog':
        pos = Dialog(pos_scale_serialport)
    pos.scale.serial_port.open()

    # External Scale
    if external_scale == 'magellan':
        external  = MagellanSASI(external_scale_serialport, weight_unit)
    elif external_scale == 'pc-100':
        external  = AcomPC100(external_scale_serialport, weight_unit)
    elif external_scale == 'dummy':
        external = Dummy(external_scale_serialport, weight_unit)
    elif scale_config.has_key('interface'):
        if scale_config['interface'] == 'toledo':
            external = Toledo(external_scale_serialport, scale_config['speed'], scale_config['parity'],weight_unit)
        elif scale_config['interface'] == 'sasi':
            external = SASI(external_scale_serialport, scale_config['speed'], scale_config['parity'], weight_unit)
    else:
        raise SignalError('External Scale not defined')
    external.scale.serial_port.open()


    # main loop
    while True:
        signal = pos.scale.serial_port.read[1]
        weight = external.get_weight(signal)
        pos.send_weight(weight)



