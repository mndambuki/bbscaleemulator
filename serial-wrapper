#!/usr/bin/env python
''' This program acts as a middle layer between the Unicenta/Open Bravo etc POS
and unsupported external scales, translating from a defined external scale 
to the scale types supported by the POS. 
It needs to be run in conjunction with a program like socat to provide the 
serial ports. See README for more details.'''


#    Copyright Paul Munday 2013

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import swrapper         # this programs module
from swrapper import get_config, SignalException
from swrapper import pos_test_samsung, pos_test_dialog, scale_test_magellan

# FUNCTIONS

def get_args():
    '''read command line arguments'''
    parser = argparse.ArgumentParser()
    parser.add_argument("--test", choices=['samsung', 'dialog', 'magellan'], 
            help="Run specified test. See README.tests")
    parser.add_argument("-v", "--verbose", action="store_true", 
            help="increase output verbosity")
    parser.add_argument("--pos", 
            help="specify the scale type used by the POS. One of dialog or samsung. If not specified the program will attempt to use scale type defined in the config file.")
    parser.add_argument("--scale", 
            help="specify scale that is connected. Possible values include dummy, MagellanSASI, PC-100. If not specified the program will attempt to use a scale defined in the config file.")
    parser.add_argument("--pos-serial", 
            help="specify the serial port the pos is connected to. e.g. /dev/pts/11")
    parser.add_argument("--scale-serial", 
            help="specify the serial port the scale is connected to. e.g. /dev/ttyS3")
    parser.add_argument("--weight-unit", 
            help="weight units used by external scales. One of k, g, or lb. For kilos, grammes or pounds")
    return parser.parse_args()

def get_signal():
    '''read a byte from the POS and return true if its trying to read weight.
    N.B. We are relying on this just waiting indefinately
    until something is written to the serial port''' 
    signal = pos.scale.serial_port.read[1]
    if POS_SCALE == 'samsung':
        if signal == '$':
            return True
        else:
            raise SignalException('Did not receive correct signal from POS')
    elif POS_SCALE == 'dialog':
        if signal == '\x05':
            return True
        else:
            raise SignalException('Did not receive correct signal from POS')

def read_scale_weight():
    '''Prompt the external scale to weigh something and return the weight.
    This doesn't check for something other than weight but it should'''
    weight = external.get_weight()
    # put check in here (should return either 5 digits, or 5 digits with a .
    # depending on pos type. Need to figure out how to enforce correct
    # weight unit POS match in a more robust way.
    return weight

# MAIN

if __name__ == "__main__": 
   
    # read command line args
    args = get_args()

    # run tests
    if args.test:
        if args.test == 'samsung':
            pos_test_samsung(args.pos_serial)
        elif args.test == 'dialog':
            pos_test_dialog(args.pos_serial)
        elif args.test == 'magellan':
            scale_test_magellan(args.scale_serial)
        print('completed tests')
        sys.exit(0)


    # read config file
    pos_config = get_config('pos')
    scale_config = get_config('scale')
    if scale_config:
        defined_scale = get_config('scale_definition')

    # load and check settings
    # Note: command line options take precendence
    if args.pos:
        POS_SCALE = args.pos
    elif pos_config.has_key('type'):
        POS_SCALE = pos_config['type']
    else:
        POS_SCALE = 'samsung'           # default to samsung if unspecified
                                        # rather than raise error
    try:
        if args.scale is not None:
            EXTERNAL_SCALE = args.scale
        elif scale_config:
            if scale_config.has_key('type'):
                EXTERNAL_SCALE = scale_config['type']
        else:
            raise SignalException ('No external scale defined')
    except SignalException, err:
        sys.stderr.write('ERROR: %s\n' % str(err))
        sys.exit(1)
    
    try:
        if args.pos_serial is not None:
            POS_SCALE_SERIALPORT = args.pos_serial
        elif pos_config:
            if pos_config.has_key('serialport'):
                POS_SCALE_SERIALPORT = pos_config['serialport']
        else:
            raise SignalException("No serial port defined for pos: " 
                    + POS_SCALE)
    except SignalException, err:
        sys.stderr.write('ERROR: %s\n' % str(err))
        sys.exit(1)

    try:
        if args.scale_serial is not None:
            EXTERNAL_SCALE_SERIALPORT = args.scale_serial
        elif scale_config.has_key('serialport'):
            EXTERNAL_SCALE_SERIALPORT = scale_config['serialport']
        else:
            raise SignalException("No serial port defined for external scale: "
                    + EXTERNAL_SCALE)
    except SignalException, err:
        sys.stderr.write('ERROR: %s\n' % str(err))
        sys.exit(1)

    if args.WEIGHT_UNIT:
        WEIGHT_UNIT = args.WEIGHT_UNIT
    elif scale_config.has_key('weight-unit'):
        WEIGHT_UNIT = scale_config['weight-unit']
    else: 
        WEIGHT_UNIT = 'k'

    # open serial devices
    # POS
    if POS_SCALE == 'samsung':
        pos = swrapper.Samsung(POS_SCALE_SERIALPORT)
    elif POS_SCALE == 'dialog':
        pos = swrapper.Dialog(POS_SCALE_SERIALPORT)
    pos.scale.serial_port.open()

    # External Scale
    if EXTERNAL_SCALE == 'magellan':
        if POS_SCALE != 'samsung':
            raise SignalException('POS scale must be set to Samsung')
        elif WEIGHT_UNIT == 'g':
            raise SignalException('Scale can not take g as weight unit')
        external = swrapper.MagellanSASI(EXTERNAL_SCALE_SERIALPORT, WEIGHT_UNIT)
    elif EXTERNAL_SCALE == 'pc-100':
        external = swrapper.AcomPC100(EXTERNAL_SCALE_SERIALPORT, WEIGHT_UNIT)
    elif EXTERNAL_SCALE == 'dummy':
        external = swrapper.Dummy(EXTERNAL_SCALE_SERIALPORT, WEIGHT_UNIT)
    elif scale_config.has_key('interface'):
        if scale_config['interface'] == 'toledo':
            if POS_SCALE != 'samsung':
                raise SignalException('POS scale must be set to Samsung')
            elif WEIGHT_UNIT == 'g':
                raise SignalException('Scale can not take g as weight unit')
            external = swrapper.Toledo(EXTERNAL_SCALE_SERIALPORT, 
                    scale_config['speed'], scale_config['parity'],WEIGHT_UNIT)
        elif scale_config['interface'] == 'sasi':
            external = swrapper.SASI(EXTERNAL_SCALE_SERIALPORT, 
                    scale_config['speed'], scale_config['parity'], WEIGHT_UNIT)
    else:
        raise SignalException('External Scale not defined')
    external.scale.serial_port.open()


    # main loop
    while True:
        signal = get_signal()
        if signal:
            weight = read_scale_weight()
            pos.send_weight(weight)
        # flush serial port(s) here?



